rho2<-matrix(c(1,scenarios$rho2.12,scenarios$rho2.12,1),2)
vars<-c(1,4) #c(scenarios$var1,scenarios$var2)
bs <- 0
beta <- cumsum(c(0.1,0.1*0.5,0.1*(0.5^2),0.1*(0.5^3),0.1*(0.5^4),0.1*(0.5^5)))[1:t-1]
nsim<-1000
set.seed(8374+k)
fail_count <- 0
max_fail <- 200
simData <- naive.simData <- NULL
# Loop Index
i<-0
# While Loop (discarding false data)
while(i<nsim){
i<-i+1
itemp<-i
#set.seed(i+173)
dt<-datagen_cont(n=N, m=cs, K=2, cv=0, rho01=rho01, rho2=rho2, vars=vars, eff=eff, time.eff=c(beta,beta))
data<-dt$short
if(t==3){
lme1<-lme(out1~time.1+time.2+arm,random=~1|cluster,data=data,control=lmeControl(returnObject=TRUE))
lme2<-lme(out2~time.1+time.2+arm,random=~1|cluster,data=data,control=lmeControl(returnObject=TRUE))
}
if(t==4){
lme1<-lme(out1~time.1+time.2+time.3+arm,random=~1|cluster,data=data,control=lmeControl(returnObject=TRUE))
lme2<-lme(out2~time.1+time.2+time.3+arm,random=~1|cluster,data=data,control=lmeControl(returnObject=TRUE))
}
if(t==5){
lme1<-lme(out1~time.1+time.2+time.3+time.4+arm,random=~1|cluster,data=data,control=lmeControl(returnObject=TRUE))
lme2<-lme(out2~time.1+time.2+time.3+time.4+arm,random=~1|cluster,data=data,control=lmeControl(returnObject=TRUE))
}
param<-try(EM.estim(data,lme1,lme2, maxiter=500, epsilon=1e-4, verbose=FALSE))
if(class(param)=="try-error"){
i<- i-1;fail_count <-fail_count+1
}else{
if(param$SEcheck=="ERROR"|anyNA(param$theta$zeta)==TRUE|anyNA(param$theta$SigmaE)==TRUE|anyNA(param$theta$SigmaPhi)==TRUE){i<- i-1;fail_count <-fail_count+1}
}
#if(param$SEcheck=="ERROR"|anyNA(param$theta$zeta)==TRUE|anyNA(param$theta$SigmaE)==TRUE|anyNA(param$theta$SigmaPhi)==TRUE){i<- i-1;fail_count <-fail_count+1}
if(fail_count > max_fail){break}
if(i<itemp){next}
SEtheta.i<-sqrt(diag(param$Vtheta))
results.i<- c(param$theta$zeta,c(param$theta$SigmaPhi[!lower.tri(param$theta$SigmaPhi)]),param$theta$SigmaE[!lower.tri(param$theta$SigmaE)],SEtheta.i)
# From individual models (not taking into account between-outcome within-subject correlation)
naive.zeta <- as.numeric(c(lme1$coefficients$fixed, lme2$coefficients$fixed))
naive.SE <- as.numeric(c(sqrt(diag(lme1$varFix)),sqrt(diag(lme2$varFix)),sqrt(diag(varcomp_vcov(lme1))),sqrt(diag(varcomp_vcov(lme2)))))
naive.SigmaE<-as.numeric(c(VarCorr(lme1)[2,1],VarCorr(lme2)[2,1]))
naive.SigmaPhi<-as.numeric(c(VarCorr(lme1)[1,1],VarCorr(lme2)[1,1]))
naive.i<-c(naive.zeta,naive.SigmaPhi,naive.SigmaE,naive.SE)
# combining results
simData<-rbind(simData,results.i)
naive.simData<-rbind(naive.simData,naive.i)
}
simData
EM.estim(data,lme1,lme2, maxiter=500, epsilon=1e-4, verbose=FALSE)
SigmaPhi
InvS2Phi
SigmaPhi
SigmaPhi
SigmaE
SigmaPhi
1.5^2
library(nlme)
library(doMC)
library(doRNG)
library(lmeInfo)
setwd("/Users/kdavis07/Documents/GitHub/CoPrimarySWCRT")
source("gendata_copri_varCluster_cte_HH.R")
source("EM_uncorrected_cte_HH.R")
args<-commandArgs(trailingOnly = TRUE)
k<-as.integer(args[1])
if (is.na(k)) k <- 23
paste("Scenario:",k)
ncores<-as.numeric(Sys.getenv("SLURM_CPUS_PER_TASK",1))
if (is.na(ncores)) ncores<-1
registerDoMC(cores=ncores)
# define scenarios
scenarios <- read.table("/Users/kdavis07/Dropbox/SW-CRT Methods Development/2_CoPrimary/RCode/Simulations/HH/Sim_Params.txt", header=TRUE, sep="")
scenarios <- subset(scenarios, scenario == k)
scenario <- k
t <- scenarios$t
N <- scenarios$N
cs <- scenarios$m
eff<-c(scenarios$delta1,scenarios$delta2)
rho01<-matrix(c(scenarios$rho01.11,scenarios$rho01.12,scenarios$rho01.12,scenarios$rho01.22),2)
rho2<-matrix(c(1,scenarios$rho2.12,scenarios$rho2.12,1),2)
vars<-c(1,1.5^2) #c(scenarios$var1,scenarios$var2)
bs <- 0
beta <- cumsum(c(0.1,0.1*0.5,0.1*(0.5^2),0.1*(0.5^3),0.1*(0.5^4),0.1*(0.5^5)))[1:t-1]
nsim<-1000
set.seed(8374+k)
fail_count <- 0
max_fail <- 200
simData <- naive.simData <- NULL
# Loop Index
i<-0
# While Loop (discarding false data)
while(i<nsim){
i<-i+1
itemp<-i
#set.seed(i+173)
dt<-datagen_cont(n=N, m=cs, K=2, cv=0, rho01=rho01, rho2=rho2, vars=vars, eff=eff, time.eff=c(beta,beta))
data<-dt$short
if(t==3){
lme1<-lme(out1~time.1+time.2+arm,random=~1|cluster,data=data,control=lmeControl(returnObject=TRUE))
lme2<-lme(out2~time.1+time.2+arm,random=~1|cluster,data=data,control=lmeControl(returnObject=TRUE))
}
if(t==4){
lme1<-lme(out1~time.1+time.2+time.3+arm,random=~1|cluster,data=data,control=lmeControl(returnObject=TRUE))
lme2<-lme(out2~time.1+time.2+time.3+arm,random=~1|cluster,data=data,control=lmeControl(returnObject=TRUE))
}
if(t==5){
lme1<-lme(out1~time.1+time.2+time.3+time.4+arm,random=~1|cluster,data=data,control=lmeControl(returnObject=TRUE))
lme2<-lme(out2~time.1+time.2+time.3+time.4+arm,random=~1|cluster,data=data,control=lmeControl(returnObject=TRUE))
}
param<-try(EM.estim(data,lme1,lme2, maxiter=500, epsilon=1e-4, verbose=FALSE))
if(class(param)=="try-error"){
i<- i-1;fail_count <-fail_count+1
}else{
if(param$SEcheck=="ERROR"|anyNA(param$theta$zeta)==TRUE|anyNA(param$theta$SigmaE)==TRUE|anyNA(param$theta$SigmaPhi)==TRUE){i<- i-1;fail_count <-fail_count+1}
}
#if(param$SEcheck=="ERROR"|anyNA(param$theta$zeta)==TRUE|anyNA(param$theta$SigmaE)==TRUE|anyNA(param$theta$SigmaPhi)==TRUE){i<- i-1;fail_count <-fail_count+1}
if(fail_count > max_fail){break}
if(i<itemp){next}
SEtheta.i<-sqrt(diag(param$Vtheta))
results.i<- c(param$theta$zeta,c(param$theta$SigmaPhi[!lower.tri(param$theta$SigmaPhi)]),param$theta$SigmaE[!lower.tri(param$theta$SigmaE)],SEtheta.i)
# From individual models (not taking into account between-outcome within-subject correlation)
naive.zeta <- as.numeric(c(lme1$coefficients$fixed, lme2$coefficients$fixed))
naive.SE <- as.numeric(c(sqrt(diag(lme1$varFix)),sqrt(diag(lme2$varFix)),sqrt(diag(varcomp_vcov(lme1))),sqrt(diag(varcomp_vcov(lme2)))))
naive.SigmaE<-as.numeric(c(VarCorr(lme1)[2,1],VarCorr(lme2)[2,1]))
naive.SigmaPhi<-as.numeric(c(VarCorr(lme1)[1,1],VarCorr(lme2)[1,1]))
naive.i<-c(naive.zeta,naive.SigmaPhi,naive.SigmaE,naive.SE)
# combining results
simData<-rbind(simData,results.i)
naive.simData<-rbind(naive.simData,naive.i)
}
library(nlme)
library(doMC)
library(doRNG)
library(lmeInfo)
setwd("/Users/kdavis07/Documents/GitHub/CoPrimarySWCRT")
source("gendata_copri_varCluster_cte_HH.R")
source("EM_uncorrected_cte_HH.R")
args<-commandArgs(trailingOnly = TRUE)
k<-as.integer(args[1])
if (is.na(k)) k <- 23
paste("Scenario:",k)
ncores<-as.numeric(Sys.getenv("SLURM_CPUS_PER_TASK",1))
if (is.na(ncores)) ncores<-1
registerDoMC(cores=ncores)
# define scenarios
scenarios <- read.table("/Users/kdavis07/Dropbox/SW-CRT Methods Development/2_CoPrimary/RCode/Simulations/HH/Sim_Params.txt", header=TRUE, sep="")
scenarios <- subset(scenarios, scenario == k)
scenario <- k
t <- scenarios$t
N <- scenarios$N
cs <- scenarios$m
eff<-c(scenarios$delta1,scenarios$delta2)
rho01<-matrix(c(scenarios$rho01.11,scenarios$rho01.12,scenarios$rho01.12,scenarios$rho01.22),2)
rho2<-matrix(c(1,scenarios$rho2.12,scenarios$rho2.12,1),2)
vars<-c(1,1.5) #c(scenarios$var1,scenarios$var2)
bs <- 0
beta <- cumsum(c(0.1,0.1*0.5,0.1*(0.5^2),0.1*(0.5^3),0.1*(0.5^4),0.1*(0.5^5)))[1:t-1]
nsim<-1000
set.seed(8374+k)
fail_count <- 0
max_fail <- 200
simData <- naive.simData <- NULL
# Loop Index
i<-0
# While Loop (discarding false data)
while(i<nsim){
i<-i+1
itemp<-i
#set.seed(i+173)
dt<-datagen_cont(n=N, m=cs, K=2, cv=0, rho01=rho01, rho2=rho2, vars=vars, eff=eff, time.eff=c(beta,beta))
data<-dt$short
if(t==3){
lme1<-lme(out1~time.1+time.2+arm,random=~1|cluster,data=data,control=lmeControl(returnObject=TRUE))
lme2<-lme(out2~time.1+time.2+arm,random=~1|cluster,data=data,control=lmeControl(returnObject=TRUE))
}
if(t==4){
lme1<-lme(out1~time.1+time.2+time.3+arm,random=~1|cluster,data=data,control=lmeControl(returnObject=TRUE))
lme2<-lme(out2~time.1+time.2+time.3+arm,random=~1|cluster,data=data,control=lmeControl(returnObject=TRUE))
}
if(t==5){
lme1<-lme(out1~time.1+time.2+time.3+time.4+arm,random=~1|cluster,data=data,control=lmeControl(returnObject=TRUE))
lme2<-lme(out2~time.1+time.2+time.3+time.4+arm,random=~1|cluster,data=data,control=lmeControl(returnObject=TRUE))
}
param<-try(EM.estim(data,lme1,lme2, maxiter=500, epsilon=1e-4, verbose=FALSE))
if(class(param)=="try-error"){
i<- i-1;fail_count <-fail_count+1
}else{
if(param$SEcheck=="ERROR"|anyNA(param$theta$zeta)==TRUE|anyNA(param$theta$SigmaE)==TRUE|anyNA(param$theta$SigmaPhi)==TRUE){i<- i-1;fail_count <-fail_count+1}
}
#if(param$SEcheck=="ERROR"|anyNA(param$theta$zeta)==TRUE|anyNA(param$theta$SigmaE)==TRUE|anyNA(param$theta$SigmaPhi)==TRUE){i<- i-1;fail_count <-fail_count+1}
if(fail_count > max_fail){break}
if(i<itemp){next}
SEtheta.i<-sqrt(diag(param$Vtheta))
results.i<- c(param$theta$zeta,c(param$theta$SigmaPhi[!lower.tri(param$theta$SigmaPhi)]),param$theta$SigmaE[!lower.tri(param$theta$SigmaE)],SEtheta.i)
# From individual models (not taking into account between-outcome within-subject correlation)
naive.zeta <- as.numeric(c(lme1$coefficients$fixed, lme2$coefficients$fixed))
naive.SE <- as.numeric(c(sqrt(diag(lme1$varFix)),sqrt(diag(lme2$varFix)),sqrt(diag(varcomp_vcov(lme1))),sqrt(diag(varcomp_vcov(lme2)))))
naive.SigmaE<-as.numeric(c(VarCorr(lme1)[2,1],VarCorr(lme2)[2,1]))
naive.SigmaPhi<-as.numeric(c(VarCorr(lme1)[1,1],VarCorr(lme2)[1,1]))
naive.i<-c(naive.zeta,naive.SigmaPhi,naive.SigmaE,naive.SE)
# combining results
simData<-rbind(simData,results.i)
naive.simData<-rbind(naive.simData,naive.i)
}
sqrt(1.2)
sqrt(1.25)
sqrt(1.3)
library(nlme)
library(doMC)
library(doRNG)
library(lmeInfo)
setwd("/Users/kdavis07/Documents/GitHub/CoPrimarySWCRT")
source("gendata_copri_varCluster_cte_HH.R")
source("EM_uncorrected_cte_HH.R")
args<-commandArgs(trailingOnly = TRUE)
k<-as.integer(args[1])
if (is.na(k)) k <- 23
paste("Scenario:",k)
ncores<-as.numeric(Sys.getenv("SLURM_CPUS_PER_TASK",1))
if (is.na(ncores)) ncores<-1
registerDoMC(cores=ncores)
# define scenarios
scenarios <- read.table("/Users/kdavis07/Dropbox/SW-CRT Methods Development/2_CoPrimary/RCode/Simulations/HH/Sim_Params.txt", header=TRUE, sep="")
scenarios <- subset(scenarios, scenario == k)
scenario <- k
t <- scenarios$t
N <- scenarios$N
cs <- scenarios$m
eff<-c(scenarios$delta1,scenarios$delta2)
rho01<-matrix(c(scenarios$rho01.11,scenarios$rho01.12,scenarios$rho01.12,scenarios$rho01.22),2)
rho2<-matrix(c(1,scenarios$rho2.12,scenarios$rho2.12,1),2)
vars<-c(1,1.2) #c(scenarios$var1,scenarios$var2)
bs <- 0
beta <- cumsum(c(0.1,0.1*0.5,0.1*(0.5^2),0.1*(0.5^3),0.1*(0.5^4),0.1*(0.5^5)))[1:t-1]
nsim<-1000
set.seed(8374+k)
fail_count <- 0
max_fail <- 200
simData <- naive.simData <- NULL
# Loop Index
i<-0
# While Loop (discarding false data)
while(i<nsim){
i<-i+1
itemp<-i
#set.seed(i+173)
dt<-datagen_cont(n=N, m=cs, K=2, cv=0, rho01=rho01, rho2=rho2, vars=vars, eff=eff, time.eff=c(beta,beta))
data<-dt$short
if(t==3){
lme1<-lme(out1~time.1+time.2+arm,random=~1|cluster,data=data,control=lmeControl(returnObject=TRUE))
lme2<-lme(out2~time.1+time.2+arm,random=~1|cluster,data=data,control=lmeControl(returnObject=TRUE))
}
if(t==4){
lme1<-lme(out1~time.1+time.2+time.3+arm,random=~1|cluster,data=data,control=lmeControl(returnObject=TRUE))
lme2<-lme(out2~time.1+time.2+time.3+arm,random=~1|cluster,data=data,control=lmeControl(returnObject=TRUE))
}
if(t==5){
lme1<-lme(out1~time.1+time.2+time.3+time.4+arm,random=~1|cluster,data=data,control=lmeControl(returnObject=TRUE))
lme2<-lme(out2~time.1+time.2+time.3+time.4+arm,random=~1|cluster,data=data,control=lmeControl(returnObject=TRUE))
}
param<-try(EM.estim(data,lme1,lme2, maxiter=500, epsilon=1e-4, verbose=FALSE))
if(class(param)=="try-error"){
i<- i-1;fail_count <-fail_count+1
}else{
if(param$SEcheck=="ERROR"|anyNA(param$theta$zeta)==TRUE|anyNA(param$theta$SigmaE)==TRUE|anyNA(param$theta$SigmaPhi)==TRUE){i<- i-1;fail_count <-fail_count+1}
}
#if(param$SEcheck=="ERROR"|anyNA(param$theta$zeta)==TRUE|anyNA(param$theta$SigmaE)==TRUE|anyNA(param$theta$SigmaPhi)==TRUE){i<- i-1;fail_count <-fail_count+1}
if(fail_count > max_fail){break}
if(i<itemp){next}
SEtheta.i<-sqrt(diag(param$Vtheta))
results.i<- c(param$theta$zeta,c(param$theta$SigmaPhi[!lower.tri(param$theta$SigmaPhi)]),param$theta$SigmaE[!lower.tri(param$theta$SigmaE)],SEtheta.i)
# From individual models (not taking into account between-outcome within-subject correlation)
naive.zeta <- as.numeric(c(lme1$coefficients$fixed, lme2$coefficients$fixed))
naive.SE <- as.numeric(c(sqrt(diag(lme1$varFix)),sqrt(diag(lme2$varFix)),sqrt(diag(varcomp_vcov(lme1))),sqrt(diag(varcomp_vcov(lme2)))))
naive.SigmaE<-as.numeric(c(VarCorr(lme1)[2,1],VarCorr(lme2)[2,1]))
naive.SigmaPhi<-as.numeric(c(VarCorr(lme1)[1,1],VarCorr(lme2)[1,1]))
naive.i<-c(naive.zeta,naive.SigmaPhi,naive.SigmaE,naive.SE)
# combining results
simData<-rbind(simData,results.i)
naive.simData<-rbind(naive.simData,naive.i)
}
if(t==3){
colnames(simData)<-c("Intercept.est1","Period2.est1","Period3.est1",
"Intercept.est2","Period2.est2","Period3.est2","Treatment.est",
"SigmaPhi11","SigmaPhi12","SigmaPhi22","SigmaE11","SigmaE12","SigmaE22",
"Intercept.se1","Period2.se1","Period3.se1",
"Intercept.se2","Period2.se2","Period3.se2","Treatment.se",
"SigmaPhi11.se","SigmaPhi12.se","SigmaPhi22.se","SigmaE11.se","SigmaE12.se","SigmaE22.se")
colnames(naive.simData)<-c("Intercept.est1","Period2.est1","Period3.est1","Treatment.est1",
"Intercept.est2","Period2.est2","Period3.est2","Treatment.est2",
"SigmaPhi11","SigmaPhi22","SigmaE11","SigmaE22",
"Intercept.se1","Period2.se1","Period3.se1","Treatment.se1",
"Intercept.se2","Period2.se2","Period3.se2","Treatment.se2",
"SigmaPhi11.se","SigmaE11.se","SigmaPhi22.se","SigmaE22.se")
}
write.table(simData, file=paste("UncorrectedResults_",analysis,"_scenario",scenario,".txt",sep=""), sep="\t", row.names=F)
write.table(naive.simData, file=paste("NaiveResults_",analysis,"_scenario",scenario,".txt",sep=""), sep="\t", row.names=F)
if(sum(eff)==0) analysis<-"error"
if(sum(eff) != 0) analysis<-"power"
simData <- as.data.frame(simData)
naive.simData <- as.data.frame(naive.simData)
write.table(simData, file=paste("UncorrectedResults_",analysis,"_scenario",scenario,".txt",sep=""), sep="\t", row.names=F)
write.table(naive.simData, file=paste("NaiveResults_",analysis,"_scenario",scenario,".txt",sep=""), sep="\t", row.names=F)
eff
rho0k <- diag(rho01)
sigmae <- diag((1-rho0k)*vars)
for(row in 1:K )
{
for(col in 1:K)
{
if(row != col){
sigmae[row,col] <- sqrt(vars[row])*sqrt(vars[col])*(rho2[row,col]-rho01[row,col])
}
}
}
# sigmac: covariance matrix for random cluster effect
rho0k <- diag(rho01)
sigmac <- diag(rho0k*vars)
for(row in 1:K )
{
for(col in 1:K)
{
if(row != col){
sigmac[row,col] <- sqrt(vars[row])*sqrt(vars[col])*rho01[row,col]
}
}
}
K=2
rho0k <- diag(rho01)
sigmae <- diag((1-rho0k)*vars)
for(row in 1:K )
{
for(col in 1:K)
{
if(row != col){
sigmae[row,col] <- sqrt(vars[row])*sqrt(vars[col])*(rho2[row,col]-rho01[row,col])
}
}
}
# sigmac: covariance matrix for random cluster effect
rho0k <- diag(rho01)
sigmac <- diag(rho0k*vars)
for(row in 1:K )
{
for(col in 1:K)
{
if(row != col){
sigmac[row,col] <- sqrt(vars[row])*sqrt(vars[col])*rho01[row,col]
}
}
}
sigmac
sigmae
scenarios<-read.table("/Users/kdavis07/Dropbox/SW-CRT Methods Development/2_CoPrimary/RCode/Simulations/HH/Sim_Params.txt", header=TRUE, sep="")
scenario <- subset(scenarios, scenario == 23)
t <- scenario$t
N <- scenario$N
m <- scenario$m
deltas<-scenario$delta1
rho01<-matrix(c(scenario$rho01.11,scenario$rho01.12,scenario$rho01.12,scenario$rho01.22),2)
rho2<-matrix(c(1,scenario$rho2.12,scenario$rho2.12,1),2)
calPower_IU(deltas,margins=0,vars=c(1,1.2),rho01,rho2,N,t,m,K=2,alpha=0.05)
library(mvtnorm)
########################################################################################################################################################
##Power/Sample Size Calculation based on the t test##
# INPUT
# deltas: (delta_1,...,delta_K), the vector of treatment effect for (1st,...,Kth) endpoints
# margins: (margin_1,...,margin_K), the vector of non-inferiority margins, when delta_1 = ... = delta_K = 0,
#          superiority tests are performed on all endpoints
# vars: (var_1,...,var_K), the vector of marginal variance for (1st,...,Kth) endpoints
# rho01: a K by K dimensional matrix for the correlation parameters (rho0^k) and (rho1^kk')
# For rho01:
#           the diagonal elements correspond to rho0^k's
#           the off-diagonal elements correspond to (rho1^kk')'s
#           For example, rho01[1,1] corresponds to rho0^1, which is the ICC for the first endpoint
#                        rho01[1,2] corresponds to rho1^12, which is the correlation of outcomes between subjects on the 1st and 2nd endpoints
# rho2: a K by K dimensional matrix for the correlation parameters (rho2^kk')
# For rho2:
#           the diagonal elements are 1
#           the off-diagonal elements correspond to (rho2^kk')'s
#           For example, rho2[1,2] corresponds to rho2^12, which is the correlation of outcomes within same subject on the 1st and 2nd endpoints
# N: number of clusters
# t: number of time periods
# m: cluster size
# K: number of endpoints
# alpha: upper bound of type I error rates over the whole null space
########################################################################################################################################################
####Function to Calculate Power Given Design Configurations based on the t test and normal (intersection-union test)#######
####Critical values c_1,...,c_K are set to t_alpha, (1-alpha)th quantile of the t distribution with df = N-2K###
calPower_IU <- function(deltas,margins,vars,rho01,rho2,N,t,m,K,alpha)
{
# Common treatment effects?
if(length(deltas)==1){common.treat.eff <- 1} else {common.treat.eff <- 0}
# Create X matrix
X<-NULL
trtSeq<-matrix(0,t-1,t)
trtSeq[upper.tri(trtSeq)]<-1
g<-N/(t-1) # number of clusters per step
X=trtSeq[rep(1:nrow(trtSeq),each=g),]
# constant calculation
U=sum(X)
V=sum((rowSums(X))^2)
W=sum((colSums(X))^2)
#####function to construct covariance matrix Sigma_E for Y_i########
constrRiE <- function(rho01,rho2,K,vars)
{ rho0k <- diag(rho01)
SigmaE_Matrix <- diag((1-rho0k)*vars)
for(row in 1:K )
{
for(col in 1:K)
{
if(row != col){
SigmaE_Matrix[row,col] <- sqrt(vars[row])*sqrt(vars[col])*(rho2[row,col]-rho01[row,col])
}
}
}
return(SigmaE_Matrix)
}
#####function to construct covariance matrix Sigma_phi for Y_i########
constrRiP <- function(rho01,K,vars)
{ rho0k <- diag(rho01)
SigmaP_Matrix <- diag(rho0k*vars)
for(row in 1:K )
{
for(col in 1:K)
{
if(row != col){
SigmaP_Matrix[row,col] <- sqrt(vars[row])*sqrt(vars[col])*rho01[row,col]
}
}
}
return(SigmaP_Matrix)
}
####Define function to calculate covariance between deltas#####
calCovbetas <- function(vars,rho01,rho2){
sigmaE <- constrRiE(rho01,rho2,K,vars)
sigmaP <- constrRiP(rho01,K,vars)
#tmp <- solve(diag(1,K)-cv^2*(m*sigmaP %*% solve(sigmaE + m*sigmaP) %*% sigmaE %*% solve(sigmaE + m*sigmaP) ))
#covMatrix <- 1/(m*sigmaz.square)*(sigmaE+m*sigmaP)%*%tmp
#covMatrix <- (covMatrix +t(covMatrix))/2  # symmerize the off-diagonal
#Stepped wedge
if(common.treat.eff == 1){
sde <- matrix(c(sqrt(sigmaE[1,1]),sqrt(sigmaE[2,2])),2,1)
covMatrix <- N*t*solve(m*(U^2+N*t*U-t*W-N*V)*t(sde)%*%solve(sigmaE)%*%sde+(N*V-U^2)*t(sde)%*%solve(t*sigmaP+(1/m)*sigmaE)%*%sde)
} else {
#covMatrix <- (N/(m*(N*U-W)))*(sigmaE-((U^2-N*V)/(U^2+N*t*U-t*W-N*V))*solve(solve(sigmaE)+((N*U-W)/(m*(U^2+N*t*U-t*W-N*V)))*solve(sigmaP)))
covMatrix <- N*t*solve(m*(U^2+N*t*U-t*W-N*V)*solve(sigmaE)+(N*V-U^2)*solve(t*sigmaP+(1/m)*sigmaE))
}
return(covMatrix)
}
####Define function to calculate correlation between test statistics #####
calCorWks <-  function(vars,rho01,rho2)
{
top <- calCovbetas(vars,rho01,rho2)
wCor <- diag(K)
for(row in 1:K )
{
for(col in 1:K)
{
if(row != col){
wCor[row,col] <- top[row,col]/sqrt(top[row,row]*top[col,col])
}
}
}
return(wCor)
}
sigmaks.sq <- diag(calCovbetas(vars,rho01,rho2))
#meanVector <- sqrt(N)*(deltas-margins)/sqrt(sigmaks.sq)
meanVector <- (deltas-margins)/sqrt(sigmaks.sq)
if(common.treat.eff == 1){
criticalValue.t <- qt(p=(1-alpha), df=(N-K-1))
criticalValue.z <- qnorm(p=(1-alpha))
pred.power.t <- 1-pt(criticalValue.t, df=(N-K-1), meanVector)
pred.power.z <- 1-pnorm(criticalValue.z, mean=meanVector)
} else {
wCor <- calCorWks(vars,rho01,rho2)
criticalValue.t <- qt(p=(1-alpha), df=(N-2*K))
criticalValue.z <- qnorm(p=(1-alpha))
pred.power.t <- pmvt(lower = rep(criticalValue.t,K),upper=rep(Inf,K),df = (N-2*K), sigma = wCor,delta=meanVector)[1]
pred.power.z <- pmvnorm(lower = rep(criticalValue.z,K),upper=rep(Inf,K), sigma = wCor,mean=meanVector)[1]
}
param <- list(vard=c(sigmaks.sq),pred.power.t=pred.power.t,pred.power.z=pred.power.z)
return(param)
}
scenarios<-read.table("/Users/kdavis07/Dropbox/SW-CRT Methods Development/2_CoPrimary/RCode/Simulations/HH/Sim_Params.txt", header=TRUE, sep="")
scenario <- subset(scenarios, scenario == 23)
t <- scenario$t
N <- scenario$N
m <- scenario$m
deltas<-scenario$delta1
rho01<-matrix(c(scenario$rho01.11,scenario$rho01.12,scenario$rho01.12,scenario$rho01.22),2)
rho2<-matrix(c(1,scenario$rho2.12,scenario$rho2.12,1),2)
calPower_IU(deltas,margins=0,vars=c(1,1.2),rho01,rho2,N,t,m,K=2,alpha=0.05)
source("/Users/kdavis07/Documents/GitHub/CoPrimarySWCRT/powerSampleCal_varCluster_ttest_SY_HoopGir.R")
sd1<-sqrt(611.13)
sd2<-sqrt(695.73)
rho2<-matrix(c(1,0.58,0.58,1),2)
rho02<-matrix(c(0.006,0,0,0.029),2);rho01<-matrix(c(0.00002,0,0,0.0068),2);deltas<-c(0.3*sd1,0.35*sd2);t<-5;N=(t-1)*4;m<-12
calPower_IU(deltas,margins=c(0,0),vars=c(sd1^2,sd2^2),rho01,rho02,rho2,N,t,m,K=2,alpha=0.05)
source("/Users/kdavis07/Documents/GitHub/CoPrimarySWCRT/powerSampleCal_IU_HoopGir.R")
# Parameter Inputs
sd1<-sqrt(611.13)
sd2<-sqrt(695.73)
rho2<-matrix(c(1,0.58,0.58,1),2)
rho02<-matrix(c(0.006,0,0,0.029),2);rho01<-matrix(c(0.00002,0,0,0.0068),2);deltas<-c(0.3*sd1,0.35*sd2);t<-5;N=(t-1)*4;m<-12
# Power
calPower_IU(deltas,margins=c(0,0),vars=c(sd1^2,sd2^2),rho01,rho02,rho2,N,t,m,K=2,alpha=0.05)
# I=16 and N=12 gives 86.3% power
